spring:
  jackson:
    default-property-inclusion: non_null
  cloud:
    openfeign:
      oauth2:
        enabled: true # openfeign打开oauth2
        clientRegistrationId: twitch # 验证的模块是twitch，连接到20行
      client:
        config:
          twitch-api:
            url: https://api.twitch.tv/helix  # http请求中共用的部分
            loggerLevel: basic # 打印出来的信息类型，还有full、none等等
            default-request-headers: # 只要是通过twitch-api发出的请求，会默认带上的header
              Client-Id: "kucgfyiouscrlsp0dnl2ptc9at3upx"
  security:
    oauth2:
      client:
        registration:
          twitch: # 在这里验证token，以下为需要发送出去的元素
            authorization-grant-type: client_credentials
            client-authentication-method: client_secret_post
            client-id: "kucgfyiouscrlsp0dnl2ptc9at3upx"
            client-secret: "r2poqrn9bqkl34jrz271i4havgbvyr"
        provider:
          twitch:
            token-uri: https://id.twitch.tv/oauth2/token # 向这个地址要
  datasource:
    url: jdbc:mysql://${DATABASE_URL:localhost}:${DATABASE_PORT:3306}/twitch?createDatabaseIfNotExist=true
    # 连接数据库的url：域名、端口号、数据库名字（twitch，在docker文件里取的）、查询参数（如果没有twitch，会自己创建）等等
    username: ${DATABASE_USERNAME:root} # DATABASE_USERNAME，预先定义的环境变量，到时候在AWS上可以重新定义，从而取代现在的root（默认值）
    password: ${DATABASE_PASSWORD:secret} # 和上面同理
    driver-class-name: com.mysql.cj.jdbc.Driver # 提供数据连接
  sql:
    init:
      mode: ${DATABASE_INIT:always} # 每次都把数据库清空
      schema-locations: "classpath:database-init.sql"
  cache:
    caffeine:
      spec: expireAfterWrite=1m # 1min的保质期


logging:
  level:
    org.apache.coyote.http11.Http11InputBuffer: TRACE # Incoming http requests
    com.laioffer.twitch.external.TwitchApiClient: DEBUG
    org.springframework.jdbc.core: DEBUG # SQL
    org.springframework.jdbc.datasource.init: DEBUG
